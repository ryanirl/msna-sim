from dataclasses import dataclass


@dataclass
class PatientConfig:
    """Configuration class for physiological parameters."""
    
    # Cardiac parameters
    heart_rate: float = 70.0                # beats per minute
    hrv_std: float = 0.04                   # heart rate variability (seconds)
    
    # Respiratory parameters  
    resp_rate: float = 15.0                 # breaths per minute
    resp_modulation_strength: float = 0.4   # respiratory modulation strength
    
    # Burst parameters
    burst_incidence: float = 65.0           # percentage of cardiac cycles with bursts
    burst_delay_mean: float = 1.3           # seconds after R-wave
    burst_delay_std: float = 0.15           # variability in burst timing
    burst_duration_mean: float = 0.5        # mean burst duration (seconds)
    burst_duration_std: float = 0.1         # burst duration variability
    
    # Signal characteristics
    signal_amplitude: float = 1.0           # relative burst amplitude
    noise_floor: float = 0.3                # baseline noise level

    def __post_init__(self):
        """Basic parameter validation."""
        if not (40 <= self.heart_rate <= 120):
            raise ValueError(f"Heart rate must be 40-120 bpm, got {self.heart_rate}")
        
        if not (0 <= self.burst_incidence <= 100):
            raise ValueError(f"Burst incidence must be 0-100%, got {self.burst_incidence}")
        
        if not (0 <= self.resp_modulation_strength <= 1):
            raise ValueError(f"Respiratory modulation must be 0-1, got {self.resp_modulation_strength}")
        
        if self.signal_amplitude <= 0:
            raise ValueError("Signal amplitude must be positive")
        
        if self.noise_floor < 0:
            raise ValueError("Noise floor must be non-negative")


@dataclass
class SignalConfig:
    """Configuration class for signal generation parameters."""
    
    # Signal processing
    integration_smoothing: float = 0.95
    phase_noise_amplitude: float = 0.1
    breathing_irregularity: float = 0.05 * 0.01
    
    # Burst shape parameters
    burst_gaussian_sigma: float = 0.8
    burst_asymmetry_offset: float = 0.3
    burst_asymmetry_sigma: float = 0.3
    
    # Burst amplitude parameters
    burst_amplitude_shape: float = 4.0
    burst_amplitude_scale: float = 0.2
    
    # Noise amplitude factors (relative to noise floor)
    pink_noise_amplitude: float = 0.4
    lf_noise_amplitude: float = 0.3
    mf_noise_amplitude: float = 0.25
    hf_noise_amplitude: float = 0.2
    powerline_60_amplitude: float = 0.03
    powerline_120_amplitude: float = 0.015
    breathing_artifact_amplitude: float = 0.1
    spike_artifact_amplitude: float = 0.3
    spike_poisson_factor: float = 5.0

    def __post_init__(self):
        """Basic parameter validation."""
        if not (0 < self.integration_smoothing < 1):
            raise ValueError(f"Integration smoothing must be between 0 and 1, got {self.integration_smoothing}")
        
        if self.phase_noise_amplitude < 0:
            raise ValueError("Phase noise amplitude must be non-negative")
        
        if self.breathing_irregularity < 0:
            raise ValueError("Breathing irregularity must be non-negative")


def create_preset_config(preset_name: str) -> PatientConfig:
    """Create preset configuration."""
    
    # A bunch of presets generated by Sonnet 4.
    presets = {
        # Healthy populations
        "normal_adult": PatientConfig(
            heart_rate = 70.0,
            hrv_std = 0.04,
            burst_incidence = 45.0,
            resp_rate = 15.0,
            resp_modulation_strength = 0.4,
            noise_floor = 0.20,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.3,
            burst_delay_std = 0.15
        ),
        
        "young_healthy": PatientConfig(
            heart_rate = 65.0,
            hrv_std = 0.06,
            burst_incidence = 25.0,
            resp_rate = 16.0,
            resp_modulation_strength = 0.5,
            noise_floor = 0.12,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.35,
            burst_delay_std = 0.12
        ),
        
        "athlete": PatientConfig(
            heart_rate = 55.0,
            hrv_std = 0.08,
            burst_incidence = 20.0,
            resp_rate = 12.0,
            resp_modulation_strength = 0.6,
            noise_floor = 0.08,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.4,
            burst_delay_std = 0.10
        ),
        
        "elderly_healthy": PatientConfig(
            heart_rate = 75.0,
            hrv_std = 0.025,
            burst_incidence = 55.0,
            resp_rate = 14.0,
            resp_modulation_strength = 0.35,
            noise_floor = 0.28,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.25,
            burst_delay_std = 0.18
        ),
        
        # Cardiovascular conditions
        "hypertensive": PatientConfig(
            heart_rate = 78.0,
            hrv_std = 0.03,
            burst_incidence = 75.0,
            resp_rate = 15.0,
            resp_modulation_strength = 0.25,
            noise_floor = 0.32,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.2,
            burst_delay_std = 0.20,
            burst_duration_mean = 0.55,
            burst_duration_std = 0.12
        ),
        
        "heart_failure": PatientConfig(
            heart_rate = 85.0,
            hrv_std = 0.02,
            burst_incidence = 85.0,
            resp_rate = 18.0,
            resp_modulation_strength = 0.15,
            noise_floor = 0.38,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.15,
            burst_delay_std = 0.25,
            burst_duration_mean = 0.6,
            burst_duration_std = 0.15
        ),
        
        "bradycardia": PatientConfig(
            heart_rate = 45.0,
            hrv_std = 0.05,
            burst_incidence = 40.0,
            resp_rate = 13.0,
            resp_modulation_strength = 0.45,
            noise_floor = 0.25,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.5,
            burst_delay_std = 0.20,
            burst_duration_mean = 0.45,
            burst_duration_std = 0.08
        ),
        
        "tachycardia": PatientConfig(
            heart_rate = 105.0,
            hrv_std = 0.025,
            burst_incidence = 70.0,
            resp_rate = 20.0,
            resp_modulation_strength = 0.3,
            noise_floor = 0.35,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.1,
            burst_delay_std = 0.12,
            burst_duration_mean = 0.4,
            burst_duration_std = 0.08
        ),
        
        # Metabolic conditions  
        "diabetes": PatientConfig(
            heart_rate = 80.0,
            hrv_std = 0.025,
            burst_incidence = 68.0,
            resp_rate = 16.0,
            resp_modulation_strength = 0.3,
            noise_floor = 0.30,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.25,
            burst_delay_std = 0.22,
            burst_duration_mean = 0.52,
            burst_duration_std = 0.14
        ),
        
        "obesity": PatientConfig(
            heart_rate = 82.0,
            hrv_std = 0.03,
            burst_incidence = 72.0,
            resp_rate = 17.0,
            resp_modulation_strength = 0.25,
            noise_floor = 0.33,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.22,
            burst_delay_std = 0.18,
            burst_duration_mean = 0.58,
            burst_duration_std = 0.13
        ),
        
        # Respiratory conditions
        "sleep_apnea": PatientConfig(
            heart_rate = 72.0,
            hrv_std = 0.06,
            burst_incidence = 78.0,
            resp_rate = 11.0,
            resp_modulation_strength = 0.2,
            noise_floor = 0.36,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.18,
            burst_delay_std = 0.28,
            burst_duration_mean = 0.62,
            burst_duration_std = 0.16
        ),
        
        "copd": PatientConfig(
            heart_rate = 88.0,
            hrv_std = 0.035,
            burst_incidence = 65.0,
            resp_rate = 22.0,
            resp_modulation_strength = 0.35,
            noise_floor = 0.40,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.28,
            burst_delay_std = 0.20,
            burst_duration_mean = 0.48,
            burst_duration_std = 0.12
        ),
        
        # Stress/psychiatric conditions
        "anxiety": PatientConfig(
            heart_rate = 92.0,
            hrv_std = 0.05,
            burst_incidence = 58.0,
            resp_rate = 19.0,
            resp_modulation_strength = 0.55,
            noise_floor = 0.27,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.32,
            burst_delay_std = 0.25,
            burst_duration_mean = 0.42,
            burst_duration_std = 0.15
        ),
        
        "post_exercise": PatientConfig(
            heart_rate = 95.0,
            hrv_std = 0.07,
            burst_incidence = 35.0,
            resp_rate = 18.0,
            resp_modulation_strength = 0.45,
            noise_floor = 0.22,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.38,
            burst_delay_std = 0.14,
            burst_duration_mean = 0.38,
            burst_duration_std = 0.09
        ),
        
        # Recording quality conditions
        "pristine_lab": PatientConfig(
            heart_rate = 68.0,
            hrv_std = 0.04,
            burst_incidence = 42.0,
            resp_rate = 14.0,
            resp_modulation_strength = 0.4,
            noise_floor = 0.05,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.3,
            burst_delay_std = 0.15
        ),
        
        "noisy_clinical": PatientConfig(
            heart_rate = 74.0,
            hrv_std = 0.04,
            burst_incidence = 50.0,
            resp_rate = 16.0,
            resp_modulation_strength = 0.4,
            noise_floor = 0.45,
            signal_amplitude = 1.0,
            burst_delay_mean = 1.3,
            burst_delay_std = 0.15
        )
    }
    
    if preset_name not in presets:
        available = ", ".join(presets.keys())
        raise ValueError(f"Unknown preset \"{preset_name}\". Available: {available}")
    
    return presets[preset_name]


